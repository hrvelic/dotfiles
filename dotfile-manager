#!/usr/bin/env python

import contextlib as __stickytape_contextlib

@__stickytape_contextlib.contextmanager
def __stickytape_temporary_dir():
    import tempfile
    import shutil
    dir_path = tempfile.mkdtemp()
    try:
        yield dir_path
    finally:
        shutil.rmtree(dir_path)

with __stickytape_temporary_dir() as __stickytape_working_dir:
    def __stickytape_write_module(path, contents):
        import os, os.path

        def make_package(path):
            parts = path.split("/")
            partial_path = __stickytape_working_dir
            for part in parts:
                partial_path = os.path.join(partial_path, part)
                if not os.path.exists(partial_path):
                    os.mkdir(partial_path)
                    with open(os.path.join(partial_path, "__init__.py"), "w") as f:
                        f.write("\n")

        make_package(os.path.dirname(path))

        full_path = os.path.join(__stickytape_working_dir, path)
        with open(full_path, "w") as module_file:
            module_file.write(contents)

    import sys as __stickytape_sys
    __stickytape_sys.path.insert(0, __stickytape_working_dir)

    __stickytape_write_module('linker.py', 'import os\nfrom os import path\nfrom fileops import backup, symlink, mkdir\n\ndef abs_path(relative_path, root=os.getcwd()):\n    return path.normpath(path.join(root, relative_path))\n\ndef backup_if_exists(file_path, verbose):\n    if path.lexists(file_path):\n        if verbose:\n            print("Backing up existing file:", file_path)\n        return [backup(file_path)]\n\n    if verbose:\n        print("Skipping backup, no file:", file_path)\n    return []\n\n\ndef link_if_not_linked(target_path, link_path, verbose=False):\n    target_path = abs_path(target_path)\n    link_path = abs_path(link_path)\n    if verbose:\n        print("Check if \\"{}\\" links to \\"{}\\"".format(link_path, target_path))\n\n\n    if path.exists(link_path) and path.samefile(link_path, target_path):\n        # Valid link already exists\n        if verbose:\n            print("  Already linked. Skipping.")\n        # return [skip_file(link_path)]\n        return []\n\n    link_target_path = relative_path_to(target_path, path.dirname(link_path))\n    if verbose:\n        print("  Not linked. Linking to", link_target_path)\n\n    result = []\n    result += backup_if_exists(link_path, verbose)\n    result.append(symlink(link_target_path, link_path))\n    return result\n\n\nhome_directory = path.expanduser("~")\n\ndef home_dir():\n    return home_directory\n\n\ndef relative_path_to(directory, root_dir):\n    # result = path.relpath(directory, root_dir)\n    # if result.startswith("."):\n    #     return result\n    # return path.join(".", result)\n    return path.relpath(directory, root_dir)\n\n\ndef link_to_dotfiles_dir(dotfiles_directory, dotfiles_dir_link, verbose=False):\n    print("Checking link to dotfiles directory...")\n    return link_if_not_linked(dotfiles_directory, dotfiles_dir_link, verbose)\n\ndef link_files(dotfiles_directory, destination_directory, verbose=False):\n    # def recursively_link_files(link_directory, file_directory, shortcut_directory, verbose):\n    file_operations = []\n    for filename in os.listdir(dotfiles_directory):\n        dotfile_path = path.join(dotfiles_directory, filename)\n        # skip files and directories ending with .disabled\n        if filename.endswith(".disabled"):\n            if verbose:\n                print("Skipping disabled file:", dotfile_path)\n            continue\n\n        link_path = path.join(destination_directory, filename)\n        if path.isdir(dotfile_path):\n            # Recurse into directories, and link files in them\n            subdir_operations = link_files(dotfile_path, link_path, verbose)\n            if not path.isdir(link_path) and len(subdir_operations) > 0:\n                # Only create directories if there were files to link in them\n                file_operations += backup_if_exists(link_path, verbose)\n                file_operations.append(mkdir(link_path))\n            file_operations += subdir_operations\n        else:\n            file_operations += link_if_not_linked(dotfile_path, link_path, verbose)\n\n    return file_operations\n\n')
    __stickytape_write_module('fileops.py', 'import sys\nimport os\nfrom os import path\nfrom enum import Enum, auto\n\n\nclass FileOperation(Enum):\n    SKIP = auto()\n    BACKUP = auto()\n    SYMLINK = auto()\n    MKDIR = auto()\n\n\ndef validate_operation(code, expected_code):\n    if code != expected_code:\n        print("Invalid operation! Expected {} but got {}".format(expected_code, code))\n        sys.exit(1)\n\n\ndef exec_skip_file(operation, dryrun=False, verbose=False):\n    code, file_path = operation\n    validate_operation(code, FileOperation.SKIP)\n    print("Skipping", file_path)\n\n\ndef find_backup_name(file_path, backup_index=None):\n    if backup_index == None:\n        result = file_path + ".backup"\n    else:\n        result = file_path + ".backup" + str(backup_index)\n\n    return result\n\n\ndef exec_backup_file(operation, dryrun=False, verbose=False):\n    code, file_path = operation\n    validate_operation(code, FileOperation.BACKUP)\n    backup_path = find_backup_name(file_path)\n    backup_counter = 0\n    while (path.lexists(backup_path)):\n        backup_counter += 1\n        backup_path = find_backup_name(file_path, backup_counter)\n\n    if verbose:\n        print("Backing up", file_path, "to", backup_path)\n    if not dryrun:\n        os.rename(file_path, backup_path)\n\n\ndef exec_symlink(operation, dryrun=False, verbose=False):\n    code, source, link = operation\n    validate_operation(code, FileOperation.SYMLINK)\n    if verbose:\n        print("Linking \'{}\' -> \'{}\'.".format(link, source))\n    if not dryrun:\n        # apparently, relative links work off current working directory\n        os.chdir(path.dirname(link))\n        os.symlink(source, link)\n\n\ndef exec_makedir(operation, dryrun=False, verbose=False):\n    code, dir_name = operation\n    validate_operation(code, FileOperation.MKDIR)\n    if verbose:\n        print("Creating directory", dir_name)\n    if not dryrun:\n        os.makedirs(dir_name)\n\n\nfile_operation_switcher = {\n    FileOperation.SKIP: exec_skip_file,\n    FileOperation.BACKUP: exec_backup_file,\n    FileOperation.SYMLINK: exec_symlink,\n    FileOperation.MKDIR: exec_makedir,\n}\n\n\ndef execute_file_operation(operation, dryrun=False, verbose=False):\n    operation_fn = file_operation_switcher.get(operation[0])\n    operation_fn(operation, dryrun, verbose)\n\n\ndef execute_file_operations(operations, dryrun=False, verbose=False):\n    for operation in operations:\n        execute_file_operation(operation, dryrun, verbose)\n\ndef print_file_operations(operations):\n    for operation in operations:\n        print("Operation: [" + str(operation) + "].")\n\ndef has_file_operations(operations):\n    return len(operations) > 0\n\ndef skip_file(file_path):\n    return (FileOperation.SKIP, file_path)\n\n\ndef backup(file_path):\n    return (FileOperation.BACKUP, file_path)\n\n\ndef symlink(source_path, link_path):\n    return (FileOperation.SYMLINK, source_path, link_path)\n\n\ndef mkdir(dir_path):\n    return (FileOperation.MKDIR, dir_path)\n')
    #!/usr/bin/env python
    import argparse
    from os import path
    from linker import link_to_dotfiles_dir, link_files, home_dir
    from fileops import execute_file_operations, print_file_operations, has_file_operations
    
    description = "Link files into user's home directory. Existing files are backed up and already valid links are ignored."
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("dotfiles_directory", metavar="DOTFILES_DIRECTORY",
                        help="Path to directory to link to.")
    parser.add_argument("-p", dest="link_directory", default=home_dir(),
                        help="Directory to put links into. Default: user's home directory ({}).".format(home_dir()))
    parser.add_argument("-l", dest="link_name", default=".dotfiles",
                        help="Name of the link to dotfiles directory. Default: \".dotfiles\".")
    parser.add_argument("-1", dest="run_files", action="store_false",
                        help="Only create link to dotfiles directory.")
    parser.add_argument("-t", dest="dryrun", action="store_true",
                        help="Don't execute any actions, only print what you are going to do. WARNING: if there isn't already a link to dotfiles directory file operations might not be correct.")
    parser.add_argument("-v", dest="verbose", action="store_true",
                        help="Very verbose output for debugging.")
    
    
    options = parser.parse_args()
    dotfiles_directory = path.normpath(path.realpath(options.dotfiles_directory))
    link_directory = path.normpath(path.realpath(path.expanduser(options.link_directory)))
    link_path = path.join(link_directory, options.link_name)
    task_count = 0
    
    
    # First create link to dotfiles. Otherwise if dotfiles project got moved, it would try to relink all the files.
    dir_operations = link_to_dotfiles_dir(dotfiles_directory, link_path, options.verbose)
    if has_file_operations(dir_operations):
        task_count += 1
        if options.verbose:
            print("File operations for directory link to dotfiles directory:")
            print_file_operations(dir_operations)
    
        execute_file_operations(dir_operations, options.dryrun, options.verbose)
    
    # Link individual dotfiles
    if options.run_files:
        # Link dot files via dotfiles directory link
        file_operations = link_files(link_path, link_directory, options.verbose)
        if has_file_operations(file_operations):
            task_count += 1
            if options.verbose:
                if options.dryrun:
                    print("WARNING: if link to dotfiles directory does not exist on a dry run link operations might be incorrect.")
                print("File operations to link individual dot files:")
                print_file_operations(file_operations)
    
            execute_file_operations(file_operations, options.dryrun, options.verbose)
    
    if task_count == 0:
        print("Nothing to do: everything up to date. Exiting.")
    